################################################################################
#                             Changing Directories                             #
################################################################################

setopt AUTO_CD
# AUTO_CD (-J)
# If  a  command is issued that can't be executed as a normal command, and the command is the name
# of a directory, perform the cd command to that directory.

setopt AUTO_PUSHD
# AUTO_PUSHD (-N)
# Make cd push the old directory onto the directory stack.

#unsetopt CDABLE_VARS
# CDABLE_VARS (-T)
# If the argument to a cd command (or an implied cd with the AUTO_CD option set) is not  a  direc‐
# tory,  and does not begin with a slash, try to expand the expression as if it were preceded by a
# `~' (see the section `Filename Expansion').

#unsetopt CHASE_DOTS
# CHASE_DOTS
# When changing to a directory containing a path segment `..' which would otherwise be treated  as
# canceling  the  previous segment in the path (in other words, `foo/..' would be removed from the
# path, or if `..' is the first part of the path, the last part of the current  working  directory
# would  be removed), instead resolve the path to the physical directory.  This option is overrid‐
# den by CHASE_LINKS.

# For example, suppose /foo/bar is a link to the directory /alt/rod.  Without this option set, `cd
# /foo/bar/..'  changes to /foo; with it set, it changes to /alt.  The same applies if the current
# directory is /foo/bar and `cd ..' is used.  Note that all other symbolic links in the path  will
# also be resolved.

#unsetopt CHASE_LINKS
# CHASE_LINKS (-w)
# Resolve  symbolic  links to their true values when changing directory.  This also has the effect
# of CHASE_DOTS, i.e. a `..' path segment will be treated as referring  to  the  physical  parent,
# even if the preceding path segment is a symbolic link.

#unsetopt POSIX_CD
# POSIX_CD
# Modifies  the  behaviour  of  cd, chdir and pushd commands to make them more compatible with the
# POSIX standard. The behaviour with the option unset is described in the documentation for the cd
# builtin  in  zshbuiltins(1).   If  the  option  is  set, the shell does not test for directories
# beneath the local directory (`.') until after all directories in cdpath have been tested.

# Also, if the option is set, the conditions under which the shell prints the new directory  after
# changing  to it are modified.  It is no longer restricted to interactive shells (although print‐
# ing of the directory stack with pushd is still limited to interactive shells); and any use of  a
# component  of CDPATH, including a `.' but excluding an empty component that is otherwise treated
# as `.', causes the directory to be printed.

setopt PUSHD_IGNORE_DUPS
# PUSHD_IGNORE_DUPS
# Don't push multiple copies of the same directory onto the directory stack.

#unsetopt PUSHD_MINUS
# PUSHD_MINUS
# Exchanges the meanings of `+' and `-' when used with a number to  specify  a  directory  in  the
# stack.

setopt PUSHD_SILENT
# PUSHD_SILENT (-E)
# Do not print the directory stack after pushd or popd.

setopt PUSHD_TO_HOME
# PUSHD_TO_HOME (-D)
# Have pushd with no arguments act like `pushd $HOME'.

################################################################################
#                                  Completion                                  #
################################################################################

#setopt ALWAYS_LAST_PROMPT
# ALWAYS_LAST_PROMPT <D>
# If  unset,  key  functions  that  list  completions  try to return to the last prompt if given a
# numeric argument. If set these functions try to return to the last prompt if  given  no  numeric
# argument.

#unsetopt ALWAYS_TO_END
# ALWAYS_TO_END
# If  a  completion is performed with the cursor within a word, and a full completion is inserted,
# the cursor is moved to the end of the word.  That is, the cursor is moved to the end of the word
# if either a single match is inserted or menu completion is performed.

#setopt AUTO_LIST
# AUTO_LIST (-9) <D>
# Automatically list choices on an ambiguous completion.

#setopt AUTO_MENU
# AUTO_MENU <D>
# Automatically use menu completion after the second consecutive request for completion, for exam‐
# ple by pressing the tab key repeatedly. This option is overridden by MENU_COMPLETE.

#unsetopt AUTO_NAME_DIRS
# AUTO_NAME_DIRS
# Any parameter that is set to the absolute name of a directory immediately  becomes  a  name  for
# that  directory,  that will be used by the `%~' and related prompt sequences, and will be avail‐
# able when completion is performed on a word starting with `~'.  (Otherwise, the  parameter  must
# be used in the form `~param' first.)

#setopt AUTO_PARAM_KEYS
# AUTO_PARAM_KEYS <D>
# If  a  parameter  name  was completed and a following character (normally a space) automatically
# inserted, and the next character typed is one of those that have to come directly after the name
# (like `}', `:', etc.), the automatically added character is deleted, so that the character typed
# comes immediately after the parameter name.  Completion in a brace expansion is  affected  simi‐
# larly: the added character is a `,', which will be removed if `}' is typed next.

#setopt AUTO_PARAM_SLASH
# AUTO_PARAM_SLASH <D>
# If  a parameter is completed whose content is the name of a directory, then add a trailing slash
# instead of a space.

#setopt AUTO_REMOVE_SLASH
# AUTO_REMOVE_SLASH <D>
# When the last character resulting from a completion is a slash and the next character typed is a
# word  delimiter,  a  slash, or a character that ends a command (such as a semicolon or an amper‐
# sand), remove the slash.

#unsetopt BASH_AUTO_LIST
# BASH_AUTO_LIST
# On an ambiguous completion, automatically list choices when the completion  function  is  called
# twice  in  succession.   This takes precedence over AUTO_LIST.  The setting of LIST_AMBIGUOUS is
# respected.  If AUTO_MENU is set, the menu behaviour will then start with the third press.   Note
# that  this  will  not work with MENU_COMPLETE, since repeated completion calls immediately cycle
# through the list in that case.

setopt COMPLETE_ALIASES
# COMPLETE_ALIASES
# Prevents aliases on the command line from being  internally  substituted  before  completion  is
# attempted.  The effect is to make the alias a distinct command for completion purposes.

setopt COMPLETE_IN_WORD
# COMPLETE_IN_WORD
# If  unset, the cursor is set to the end of the word if completion is started. Otherwise it stays
# there and completion is done from both ends.

#unsetopt GLOB_COMPLETE
# GLOB_COMPLETE
# When the current word has a glob pattern, do not insert all the words resulting from the  expan‐
# sion  but  generate  matches  as  for  completion and cycle through them like MENU_COMPLETE. The
# matches are generated as if a `*' was added to the end of the word, or inserted  at  the  cursor
# when  COMPLETE_IN_WORD  is  set.  This actually uses pattern matching, not globbing, so it works
# not only for files but for any completion, such as options, user names, etc.

# Note that when the pattern matcher is used, matching control (for example,  case-insensitive  or
# anchored  matching) cannot be used.  This limitation only applies when the current word contains
# a pattern; simply turning on the GLOB_COMPLETE option does not have this effect.

#setopt HASH_LIST_ALL
# HASH_LIST_ALL <D>
# Whenever a command completion or spelling correction is attempted, make sure the entire  command
# path is hashed first.  This makes the first completion slower but avoids false reports of spell‐
# ing errors.

#setopt LIST_AMBIGUOUS
# LIST_AMBIGUOUS <D>
# This option works when AUTO_LIST or BASH_AUTO_LIST is also set.  If there is an unambiguous pre‐
# fix  to  insert  on the command line, that is done without a completion list being displayed; in
# other words, auto-listing behaviour only takes place when nothing would  be  inserted.   In  the
# case  of BASH_AUTO_LIST, this means that the list will be delayed to the third call of the func‐
# tion.

unsetopt LIST_BEEP
# LIST_BEEP <D>
# Beep on an ambiguous completion.  More accurately, this forces the completion widgets to  return
# status  1  on an ambiguous completion, which causes the shell to beep if the option BEEP is also
# set; this may be modified if completion is called from a user-defined widget.

setopt LIST_PACKED
# LIST_PACKED
# Try to make the completion list smaller (occupying less lines) by printing the matches  in  col‐
# umns with different widths.

setopt LIST_ROWS_FIRST
# LIST_ROWS_FIRST
# Lay out the matches in completion lists sorted horizontally, that is, the second match is to the
# right of the first one, not under it as usual.

#setopt LIST_TYPES
# LIST_TYPES (-X) <D>
# When listing files that are possible completions, show the type of each  file  with  a  trailing
# identifying mark.

#unsetopt MENU_COMPLETE
# MENU_COMPLETE (-Y)
# On  an ambiguous completion, instead of listing possibilities or beeping, insert the first match
# immediately.  Then when completion is requested again, remove the first  match  and  insert  the
# second  match,  etc.   When  there  are  no  more  matches,  go  back  to  the  first one again.
# reverse-menu-complete may be used to loop through the list in the other direction.  This  option
# overrides AUTO_MENU.

#unsetopt REC_EXACT
# REC_EXACT (-S)
# In completion, recognize exact matches even if they are ambiguous.

################################################################################
#                            Expansion and Globbing                            #
################################################################################

setopt BAD_PATTERN
# BAD_PATTERN (+2) <C> <Z>
# If  a  pattern for filename generation is badly formed, print an error message.  (If this option
# is unset, the pattern will be left unchanged.)

setopt BARE_GLOB_QUAL
# BARE_GLOB_QUAL <Z>
# In a glob pattern, treat a trailing set of parentheses as a qualifier list, if  it  contains  no
# `|', `(' or (if special) `~' characters.  See the section `Filename Generation'.

#unsetopt BRACE_CCL
# BRACE_CCL
# Expand  expressions  in  braces which would not otherwise undergo brace expansion to a lexically
# ordered list of all the characters.  See the section `Brace Expansion'.

#setopt CASE_GLOB
# CASE_GLOB <D>
# Make globbing (filename generation) sensitive to case.  Note that other  uses  of  patterns  are
# always  sensitive  to case.  If the option is unset, the presence of any character which is spe‐
# cial to filename generation will cause case-insensitive matching.  For example, cvs(/) can match
# the  directory  CVS owing to the presence of the globbing flag (unless the option BARE_GLOB_QUAL
# is unset).

#setopt CASE_MATCH
# CASE_MATCH <D>
# Make regular expressions using the zsh/regex module (including matches  with  =~)  sensitive  to
# case.

#unsetopt CSH_NULL_GLOB
# CSH_NULL_GLOB <C>
# If  a pattern for filename generation has no matches, delete the pattern from the argument list;
# do not report an error unless all the patterns in a command have no matches.  Overrides NOMATCH.

setopt EQUALS
# EQUALS <Z>
# Perform = filename expansion.  (See the section `Filename Expansion'.)

#unsetopt EXTENDED_GLOB
# EXTENDED_GLOB
# Treat the `#', `~' and `^' characters as part of patterns for  filename  generation,  etc.   (An
# initial unquoted `~' always produces named directory expansion.)

#setopt GLOB
# GLOB (+F, ksh: +f) <D>
# Perform filename generation (globbing).  (See the section `Filename Generation'.)

#unsetopt GLOB_ASSIGN
# GLOB_ASSIGN <C>
# If  this  option  is  set, filename generation (globbing) is performed on the right hand side of
# scalar parameter assignments of the form `name=pattern (e.g. `foo=*').  If the result  has  more
# than  one  word the parameter will become an array with those words as arguments. This option is
# provided for backwards compatibility only: globbing is always performed on the right  hand  side
# of  array  assignments  of the form `name=(value)' (e.g. `foo=(*)') and this form is recommended
# for clarity; with this option set, it is not possible to predict whether the result will  be  an
# array or a scalar.

#unsetopt GLOB_DOTS
# GLOB_DOTS (-4)
# Do not require a leading `.' in a filename to be matched explicitly.

#unsetopt GLOB_SUBST
# GLOB_SUBST <C> <K> <S>
# Treat any characters resulting from parameter expansion as being eligible for file expansion and
# filename generation, and any characters resulting from command substitution  as  being  eligible
# for filename generation.  Braces (and commas in between) do not become eligible for expansion.

#unsetopt HIST_SUBST_PATTERN
# HIST_SUBST_PATTERN
# Substitutions  using the :s and :& history modifiers are performed with pattern matching instead
# of string matching.  This occurs wherever history modifiers are valid, including glob qualifiers
# and parameters.  See the section Modifiers in zshexpn(1).

#unsetopt IGNORE_BRACES
# IGNORE_BRACES (-I) <S>
# Do  not  perform  brace  expansion.  For historical reasons this also includes the effect of the
# IGNORE_CLOSE_BRACES option.

#unsetopt IGNORE_CLOSE_BRACES
# IGNORE_CLOSE_BRACES
# When neither this option nor IGNORE_BRACES is set, a sole close brace character `}' is syntacti‐
# cally significant at any point on a command line.  This has the effect that no semicolon or new‐
# line is necessary before the brace terminating a function  or  current  shell  construct.   When
# either  option  is  set,  a closing brace is syntactically significant only in command position.
# Unlike IGNORE_BRACES, this option does not disable brace expansion.

# For example, with both options unset a function may be defined in the following fashion:

# args() { echo $# }

# while if either option is set, this does not work and something equivalent to the  following  is
# required:

# args() { echo $#; }

#unsetopt KSH_GLOB
# KSH_GLOB <K>
# In pattern matching, the interpretation of parentheses is affected by a preceding `@', `*', `+',
# `?' or `!'.  See the section `Filename Generation'.

#unsetopt MAGIC_EQUAL_SUBST
# MAGIC_EQUAL_SUBST
# All unquoted arguments of the form `anything=expression' appearing after the command  name  have
# filename  expansion (that is, where expression has a leading `~' or `=') performed on expression
# as if it were a parameter assignment.  The argument is not otherwise treated  specially;  it  is
# passed to the command as a single argument, and not used as an actual parameter assignment.  For
# example, in echo foo=~/bar:~/rod, both occurrences of ~ would be replaced.  Note that this  hap‐
# pens anyway with typeset and similar statements.

# This option respects the setting of the KSH_TYPESET option.  In other words, if both options are
# in effect, arguments looking like assignments will not undergo word splitting.

#unsetopt MARK_DIRS
# MARK_DIRS (-8, ksh: -X)
# Append a trailing `/' to all directory names resulting from filename generation (globbing).

setopt MULTIBYTE
# MULTIBYTE <C> <K> <Z>
# Respect multibyte characters when found in strings.  When this option is set, strings are  exam‐
# ined  using  the  system  library to determine how many bytes form a character, depending on the
# current locale.  This affects the way characters are counted in pattern matching, parameter val‐
# ues and various delimiters.

# The option is on by default if the shell was compiled with MULTIBYTE_SUPPORT except in sh emula‐
# tion; otherwise it is off by default and has no effect if turned on.  The mode is off in sh emu‐
# lation for compatibility but for interactive use may need to be turned on if the terminal inter‐
# prets multibyte characters.

# If the option is off a single byte is always treated as a single  character.   This  setting  is
# designed purely for examining strings known to contain raw bytes or other values that may not be
# characters in the current locale.  It is not necessary to unset the option  merely  because  the
# character set for the current locale does not contain multibyte characters.

# The option does not affect the shell's editor,  which always uses the locale to determine multi‐
# byte characters.  This is because the character set displayed by the terminal emulator is  inde‐
# pendent of shell settings.

setopt NOMATCH
# NOMATCH (+3) <C> <Z>
# If  a  pattern  for  filename  generation  has no matches, print an error, instead of leaving it
# unchanged in the argument list.  This also applies to file expansion of an initial `~' or `='.

#unsetopt NULL_GLOB
# NULL_GLOB (-G)
# If a pattern for filename generation has no matches, delete the pattern from the  argument  list
# instead of reporting an error.  Overrides NOMATCH.

#unsetopt NUMERIC_GLOB_SORT
# NUMERIC_GLOB_SORT
# If  numeric  filenames  are matched by a filename generation pattern, sort the filenames numeri‐
# cally rather than lexicographically.

#unsetopt RC_EXPAND_PARAM
# RC_EXPAND_PARAM (-P)
# Array expansions of the form `foo${xx}bar', where the parameter xx is set to (a b c),  are  sub‐
# stituted  with  `fooabar  foobbar  foocbar'  instead of the default `fooa b cbar'.  Note that an
# empty array will therefore cause all arguments to be removed.

setopt REMATCH_PCRE
# REMATCH_PCRE <Z>
# If set, regular expression matching with  the  =~  operator  will  use  Perl-Compatible  Regular
# Expressions  from  the PCRE library, if available.  If not set, regular expressions will use the
# extended regexp syntax provided by the system libraries.

#unsetopt SH_GLOB
# SH_GLOB <K> <S>
# Disables the special meaning of `(', `|', `)' and '<' for globbing the result of  parameter  and
# command substitutions, and in some other places where the shell accepts patterns.  If SH_GLOB is
# set but KSH_GLOB is not, the shell allows the interpretation of subshell expressions enclosed in
# parentheses  in  some cases where there is no space before the opening parenthesis, e.g. !(true)
# is interpreted as if there were a space after the !.  This option is set by default  if  zsh  is
# invoked as sh or ksh.

setopt UNSET
# UNSET (+u, ksh: +u) <K> <S> <Z>
# Treat  unset  parameters as if they were empty when substituting.  Otherwise they are treated as
# an error.

#unsetopt WARN_CREATE_GLOBAL
# WARN_CREATE_GLOBAL
# Print a warning message when a global parameter is created in a function by an assignment.  This
# often  indicates that a parameter has not been declared local when it should have been.  Parame‐
# ters explicitly declared global from within a function using typeset -g do not cause a  warning.
# Note  that there is no warning when a local parameter is assigned to in a nested function, which
# may also indicate an error.

################################################################################
#                                   History                                    #
################################################################################

#setopt APPEND_HISTORY
# APPEND_HISTORY <D>
# If this is set, zsh sessions will append their history list to the  history  file,  rather  than
# replace  it.  Thus, multiple parallel zsh sessions will all have the new entries from their his‐
# tory lists added to the history file, in the order that they exit.  The file will still be peri‐
# odically  re-written to trim it when the number of lines grows 20% beyond the value specified by
# $SAVEHIST (see also the HIST_SAVE_BY_COPY option).

setopt BANG_HIST
# BANG_HIST (+K) <C> <Z>
# Perform textual history expansion, csh-style, treating the character `!' specially.

#unsetopt EXTENDED_HISTORY
# EXTENDED_HISTORY <C>
# Save each command's beginning timestamp (in seconds since the epoch) and the duration  (in  sec‐
# onds) to the history file.  The format of this prefixed data is:

# `: <beginning time>:<elapsed seconds>;<command>'.

#unsetopt HIST_ALLOW_CLOBBER
# HIST_ALLOW_CLOBBER
# Add  `|' to output redirections in the history.  This allows history references to clobber files
# even when CLOBBER is unset.

unsetopt HIST_BEEP
# HIST_BEEP <D>
# Beep when an attempt is made to access a history entry which isn't there.

#unsetopt HIST_EXPIRE_DUPS_FIRST
# HIST_EXPIRE_DUPS_FIRST
# If the internal history needs to be trimmed to add the current command line, setting this option
# will cause the oldest history event that has a duplicate to be lost before losing a unique event
# from the list.  You should be sure to set the value of HISTSIZE to a larger number than SAVEHIST
# in order to give you some room for the duplicated events, otherwise this option will behave just
# like HIST_IGNORE_ALL_DUPS once the history fills up with unique events.

#unsetopt HIST_FCNTL_LOCK
# HIST_FCNTL_LOCK
# When writing out the history file, by default zsh uses ad-hoc file locking to avoid known  prob‐
# lems  with  locking on some operating systems.  With this option locking is done by means of the
# system's fcntl call, where this method is available.  On recent operating systems this may  pro‐
# vide better performance, in particular avoiding history corruption when files are stored on NFS.

setopt HIST_FIND_NO_DUPS
# HIST_FIND_NO_DUPS
# When  searching for history entries in the line editor, do not display duplicates of a line pre‐
# viously found, even if the duplicates are not contiguous.

#unsetopt HIST_IGNORE_ALL_DUPS
# HIST_IGNORE_ALL_DUPS
# If a new command line being added to the history list duplicates an older one, the older command
# is removed from the list (even if it is not the previous event).

#unsetopt HIST_IGNORE_DUPS
# HIST_IGNORE_DUPS (-h)
# Do not enter command lines into the history list if they are duplicates of the previous event.

#unsetopt HIST_IGNORE_SPACE
# HIST_IGNORE_SPACE (-g)
# Remove  command  lines from the history list when the first character on the line is a space, or
# when one of the expanded aliases contains a leading space.  Only normal aliases (not  global  or
# suffix  aliases)  have  this  behaviour.   Note that the command lingers in the internal history
# until the next command is entered before it vanishes, allowing you to briefly reuse or edit  the
# line.   If  you want to make it vanish right away without entering another command, type a space
# and press return.

#unsetopt HIST_LEX_WORDS
# HIST_LEX_WORDS
# By default, shell history that is read in from files is split into words  on  all  white  space.
# This means that arguments with quoted whitespace are not correctly handled, with the consequence
# that references to words in history lines that have been read from a  file  may  be  inaccurate.
# When  this  option is set, words read in from a history file are divided up in a similar fashion
# to normal shell command line handling.  Although this produces more accurately delimited  words,
# if  the  size  of  the  history file is large this can be slow.  Trial and error is necessary to
# decide.

#unsetopt HIST_NO_FUNCTIONS
# HIST_NO_FUNCTIONS
# Remove function definitions from the history list.  Note that the function lingers in the inter‐
# nal  history until the next command is entered before it vanishes, allowing you to briefly reuse
# or edit the definition.

#unsetopt HIST_NO_STORE
# HIST_NO_STORE
# Remove the history (fc -l) command from the history list when invoked.  Note  that  the  command
# lingers  in  the internal history until the next command is entered before it vanishes, allowing
# you to briefly reuse or edit the line.

#unsetopt HIST_REDUCE_BLANKS
# HIST_REDUCE_BLANKS
# Remove superfluous blanks from each command line being added to the history list.

#setopt HIST_SAVE_BY_COPY
# HIST_SAVE_BY_COPY <D>
# When the history file is re-written, we normally write out a  copy  of  the  file  named  $HIST‐
# FILE.new  and  then  rename  it  over the old one.  However, if this option is unset, we instead
# truncate the old history file and write out the new  version  in-place.   If  one  of  the  his‐
# tory-appending options is enabled, this option only has an effect when the enlarged history file
# needs to be re-written to trim it down to size.  Disable this only if you have special needs, as
# doing so makes it possible to lose history entries if zsh gets interrupted during the save.

# When  writing out a copy of the history file, zsh preserves the old file's permissions and group
# information, but will refuse to write out a new file if  it  would  change  the  history  file's
# owner.

#unsetopt HIST_SAVE_NO_DUPS
# HIST_SAVE_NO_DUPS
# When writing out the history file, older commands that duplicate newer ones are omitted.

#unsetopt HIST_VERIFY
# HIST_VERIFY
# Whenever  the  user  enters  a  line  with  history  expansion, don't execute the line directly;
# instead, perform history expansion and reload the line into the editing buffer.

setopt INC_APPEND_HISTORY
# INC_APPEND_HISTORY
# This options works like APPEND_HISTORY except that new history lines are added to the  $HISTFILE
# incrementally  (as  soon  as  they are entered), rather than waiting until the shell exits.  The
# file will still be periodically re-written to trim it when the number of lines grows 20%  beyond
# the value specified by $SAVEHIST (see also the HIST_SAVE_BY_COPY option).

setopt SHARE_HISTORY
# SHARE_HISTORY <K>

# This option both imports new commands from the history file, and also causes your typed commands
# to be appended to the history file (the latter is like specifying INC_APPEND_HISTORY).  The his‐
# tory  lines  are also output with timestamps ala EXTENDED_HISTORY (which makes it easier to find
# the spot where we left off reading the file after it gets re-written).

# By default, history movement commands visit the imported lines as well as the local  lines,  but
# you  can  toggle this on and off with the set-local-history zle binding.  It is also possible to
# create a zle widget that will make some commands ignore  imported  commands,  and  some  include
# them.

# If  you  find  that  you want more control over when commands get imported, you may wish to turn
# SHARE_HISTORY off, INC_APPEND_HISTORY on, and then manually import commands  whenever  you  need
# them using `fc -RI'.

################################################################################
#                                Initialisation                                #
################################################################################

#unsetopt ALL_EXPORT
# ALL_EXPORT (-a, ksh: -a)
# All parameters subsequently defined are automatically exported.

setopt GLOBAL_EXPORT
# GLOBAL_EXPORT (<Z>)
# If this option is set, passing the -x flag to the builtins declare, float, integer, readonly and
# typeset (but not local) will also set the -g flag;  hence parameters exported to the environment
# will  not  be  made  local to the enclosing function, unless they were already or the flag +g is
# given explicitly.  If the option is unset, exported parameters will be made local  in  just  the
# same way as any other parameter.

# This  option is set by default for backward compatibility; it is not recommended that its behav‐
# iour be relied upon.  Note that the builtin export always sets both the -x  and  -g  flags,  and
# hence  its  effect extends beyond the scope of the enclosing function; this is the most portable
# way to achieve this behaviour.

#setopt GLOBAL_RCS
# GLOBAL_RCS (-d) <D>
# If this option is unset, the startup files /etc/zprofile, /etc/zshrc, /etc/zlogin and  /etc/zlo‐
# gout  will  not  be  run.  It can be disabled and re-enabled at any time, including inside local
# startup files (.zshrc, etc.).

#setopt RCS
# RCS (+f) <D>
# After  /etc/zshenv  is  sourced  on  startup,  source  the  .zshenv,  /etc/zprofile,  .zprofile,
# /etc/zshrc,  .zshrc,  /etc/zlogin,  .zlogin,  and  .zlogout  files,  as described in the section
# `Files'.  If this option is unset, the /etc/zshenv file is still sourced, but any of the  others
# will  not  be;  it  can be set at any time to prevent the remaining startup files after the cur‐
# rently executing one from being sourced.

################################################################################
#                                 Input/Output                                 #
################################################################################

#setopt ALIASES
# ALIASES <D>
# Expand aliases.

#setopt CLOBBER
# CLOBBER (+C, ksh: +C) <D>
# Allows `>' redirection to truncate existing files, and `>>' to create files.  Otherwise `>!'  or
# `>|' must be used to truncate a file, and `>>!' or `>>|' to create a file.

#unsetopt CORRECT
# CORRECT (-0)
# Try to correct the spelling of commands.  Note that, when the HASH_LIST_ALL option is not set or
# when some directories in the path are not readable, this may falsely report spelling errors  the
# first time some commands are used.

# The  shell  variable  CORRECT_IGNORE  may  be set to a pattern to match words that will never be
# offered as corrections.

#unsetopt CORRECT_ALL
# CORRECT_ALL (-O)
# Try to correct the spelling of all arguments in a line.

#unsetopt DVORAK
# DVORAK Use the Dvorak keyboard instead of the standard qwerty keyboard as a basis for examining  spell‐
# ing mistakes for the CORRECT and CORRECT_ALL options and the spell-word editor command.

#setopt FLOW_CONTROL
# FLOW_CONTROL <D>
# If  this  option  is  unset,  output flow control via start/stop characters (usually assigned to
# ^S/^Q) is disabled in the shell's editor.

#unsetopt IGNORE_EOF
# IGNORE_EOF (-7)
# Do not exit on end-of-file.  Require the use of exit or logout instead.  However,  ten  consecu‐
# tive EOFs will cause the shell to exit anyway, to avoid the shell hanging if its tty goes away.

# Also,  if this option is set and the Zsh Line Editor is used, widgets implemented by shell func‐
# tions can be bound to EOF (normally Control-D) without  printing  the  normal  warning  message.
# This works only for normal widgets, not for completion widgets.

setopt INTERACTIVE_COMMENTS
# INTERACTIVE_COMMENTS (-k) <K> <S>
# Allow comments even in interactive shells.

#setopt HASH_CMDS
# HASH_CMDS <D>
# Note  the location of each command the first time it is executed.  Subsequent invocations of the
# same command will use the saved location, avoiding a path search.  If this option is  unset,  no
# path  hashing  is done at all.  However, when CORRECT is set, commands whose names do not appear
# in the functions or aliases hash tables are hashed in order to avoid reporting them as  spelling
# errors.

#setopt HASH_DIRS
# HASH_DIRS <D>
# Whenever  a command name is hashed, hash the directory containing it, as well as all directories
# that occur earlier in the path.  Has no effect if neither HASH_CMDS nor CORRECT is set.

#unsetopt HASH_EXECUTABLES_ONLY
# HASH_EXECUTABLES_ONLY
# When hashing commands because of HASH_COMMANDS, check that the file to be hashed is actually  an
# executable.  This option is unset by default as if the path contains a large number of commands,
# or consists of many remote files, the additional tests can take a long time.  Trial and error is
# needed to show if this option is beneficial.

#unsetopt MAIL_WARNING
# MAIL_WARNING (-U)
# Print a warning message if a mail file has been accessed since the shell last checked.

#unsetopt PATH_DIRS
# PATH_DIRS (-Q)
# Perform  a  path search even on command names with slashes in them.  Thus if `/usr/local/bin' is
# in the user's path, and he or she types `X11/xinit', the command `/usr/local/bin/X11/xinit' will
# be executed (assuming it exists).  Commands explicitly beginning with `/', `./' or `../' are not
# subject to the path search.  This also applies to the `.' builtin.

# Note that subdirectories of the current directory are always searched for executables  specified
# in  this  form.   This takes place before any search indicated by this option, and regardless of
# whether `.' or the current directory appear in the command search path.

#unsetopt PATH_SCRIPT
# PATH_SCRIPT <K> <S>
# If this option is not set, a script passed as the first non-option argument to  the  shell  must
# contain  the name of the file to open.  If this option is set, and the script does not specify a
# directory path, the script is looked for first in the current directory,  then  in  the  command
# path.  See the section INVOCATION in zsh(1).

#unsetopt PRINT_EIGHT_BIT
# PRINT_EIGHT_BIT
# Print  eight bit characters literally in completion lists, etc.  This option is not necessary if
# your system correctly returns the printability of eight bit characters (see ctype(3)).

#unsetopt PRINT_EXIT_VALUE
# PRINT_EXIT_VALUE (-1)
# Print the exit value of programs with non-zero exit status.

#unsetopt RC_QUOTES
# RC_QUOTES
# Allow the character sequence `''' to signify a single quote within singly quoted strings.   Note
# this  does not apply in quoted strings using the format $'...', where a backslashed single quote
# can be used.

#unsetopt RM_STAR_SILENT
# RM_STAR_SILENT (-H) <K> <S>
# Do not query the user before executing `rm *' or `rm path/*'.

unsetopt RM_STAR_WAIT
# RM_STAR_WAIT
# If querying the user before executing `rm *' or `rm path/*', first wait ten seconds  and  ignore
# anything  typed  in  that  time.   This avoids the problem of reflexively answering `yes' to the
# query when one didn't really mean it.  The wait and query can always be avoided by expanding the
# `*' in ZLE (with tab).

setopt SHORT_LOOPS
# SHORT_LOOPS <C> <Z>
# Allow the short forms of for, repeat, select, if, and function constructs.

#unsetopt SUN_KEYBOARD_HACK
# SUN_KEYBOARD_HACK (-L)
# If  a  line ends with a backquote, and there are an odd number of backquotes on the line, ignore
# the trailing backquote.  This is useful on some keyboards where the return key is too small, and
# the  backquote  key  lies  annoyingly close to it.  As an alternative the variable KEYBOARD_HACK
# lets you choose the character to be removed.

################################################################################
#                                 Job Control                                  #
################################################################################

#unsetopt AUTO_CONTINUE
# AUTO_CONTINUE
# With this option set, stopped jobs that are removed from the job table with the  disown  builtin
# command are automatically sent a CONT signal to make them running.

#unsetopt AUTO_RESUME
# AUTO_RESUME (-W)
# Treat  single word simple commands without redirection as candidates for resumption of an exist‐
# ing job.

setopt BG_NICE
# BG_NICE (-6) <C> <Z>
# Run all background jobs at a lower priority.  This option is set by default.

setopt CHECK_JOBS
# CHECK_JOBS <Z>
# Report the status of background and suspended jobs before exiting a shell with  job  control;  a
# second  attempt  to exit the shell will succeed.  NO_CHECK_JOBS is best used only in combination
# with NO_HUP, else such jobs will be killed automatically.

# The check is omitted if the commands run from the previous command line included a  `jobs'  com‐
# mand,  since  it  is  assumed  the user is aware that there are background or suspended jobs.  A
# `jobs' command run from one of the hook functions defined in the section  SPECIAL  FUNCTIONS  in
# zshmisc(1) is not counted for this purpose.

setopt HUP
# HUP <Z>
# Send the HUP signal to running jobs when the shell exits.

#unsetopt LONG_LIST_JOBS
# LONG_LIST_JOBS (-R)
# List jobs in the long format by default.

setopt MONITOR
# MONITOR (-m, ksh: -m)
# Allow job control.  Set by default in interactive shells.

setopt NOTIFY
# NOTIFY (-5, ksh: -b) <Z>
# Report the status of background jobs immediately, rather than waiting until just before printing
# a prompt.

#unsetopt POSIX_JOBS
# POSIX_JOBS <K> <S>
# This option makes job control more compliant with the POSIX standard.

# When the option is not set, the MONITOR option is unset on entry to subshells, so that job  con‐
# trol  is  no  longer  active.  When the option is set, the MONITOR option and job control remain
# active in the subshell, but note that the subshell has no access to jobs in the parent shell.

# When the option is not set, jobs put in the background or foreground with bg or fg are displayed
# with the same information that would be reported by jobs.  When the option is set, only the text
# is printed.  The output from jobs itself is not affected by the option.

# When the option is not set, job information from the parent shell is saved for output  within  a
# subshell  (for example, within a pipeline).  When the option is set, the output of jobs is empty
# until a job is started within the subshell.

# When the option is set, it becomes possible to use the wait builtin to wait  for  the  last  job
# started in the background (as given by $!) even if that job has already exited.  This works even
# if the option is turned on temporarily around the use of the wait builtin.

################################################################################
#                                  Prompting                                   #
################################################################################

#unsetopt PROMPT_BANG
# PROMPT_BANG <K>
# If set, `!' is treated specially in prompt expansion.  See EXPANSION OF PROMPT SEQUENCES in zsh‐
# misc(1).

#setopt PROMPT_CR
# PROMPT_CR (+V) <D>
# Print a carriage return just before printing a prompt in the line editor.  This is on by default
# as multi-line editing is only possible if the editor knows where the start of the line appears.

#setopt PROMPT_SP
# PROMPT_SP <D>
# Attempt to preserve a partial line (i.e. a line that did not end with a newline) that would oth‐
# erwise  be  covered  up  by  the command prompt due to the PROMPT_CR option.  This works by out‐
# putting some cursor-control characters, including a series of spaces, that should make the  ter‐
# minal wrap to the next line when a partial line is present (note that this is only successful if
# your terminal has automatic margins, which is typical).

# When a partial line is preserved, by default you will see an inverse+bold character at  the  end
# of  the  partial  line:  a "%" for a normal user or a "#" for root.  If set, the shell parameter
# PROMPT_EOL_MARK can be used to customize how the end of partial lines are shown.

# NOTE: if the PROMPT_CR option is not set, enabling this option will have no effect.  This option
# is on by default.

setopt PROMPT_PERCENT
# PROMPT_PERCENT <C> <Z>
# If set, `%' is treated specially in prompt expansion.  See EXPANSION OF PROMPT SEQUENCES in zsh‐
# misc(1).

#unsetopt PROMPT_SUBST
# PROMPT_SUBST <K> <S>
# If set, parameter expansion, command substitution and  arithmetic  expansion  are  performed  in
# prompts.  Substitutions within prompts do not affect the command status.

#unsetopt TRANSIENT_RPROMPT
# TRANSIENT_RPROMPT
# Remove  any  right  prompt  from display when accepting a command line.  This may be useful with
# terminals with other cut/paste methods.

################################################################################
#                               Shell Emulation                                #
################################################################################

#unsetopt BASH_REMATCH
# BASH_REMATCH
# When  set,  matches  performed  with  the  =~ operator will set the BASH_REMATCH array variable,
# instead of the default MATCH and match variables.  The first element of the  BASH_REMATCH  array
# will  contain the entire matched text and subsequent elements will contain extracted substrings.
# This option makes more sense when KSH_ARRAYS is also set, so that the entire matched portion  is
# stored  at  index 0 and the first substring is at index 1.  Without this option, the MATCH vari‐
# able contains the entire matched text and the match array variable contains substrings.

#unsetopt BSD_ECHO
# BSD_ECHO <S>
# Make the echo builtin compatible with the BSD echo(1) command.  This disables backslashed escape
# sequences in echo strings unless the -e option is specified.

#unsetopt CONTINUE_ON_ERROR
# CONTINUE_ON_ERROR
# If  a fatal error is encountered (see the section ERRORS in zshmisc(1)), and the code is running
# in a script, the shell will resume execution at the next statement in  the  script  at  the  top
# level,  in  other  words outside all functions or shell constructs such as loops and conditions.
# This mimics the behaviour of interactive shells, where the shell returns to the line  editor  to
# read a new command; it was the normal behaviour in versions of zsh before 5.0.1.

#unsetopt CSH_JUNKIE_HISTORY
# CSH_JUNKIE_HISTORY <C>
# A history reference without an event specifier will always refer to the previous command.  With‐
# out this option, such a history reference refers to the same event as the previous history  ref‐
# erence, defaulting to the previous command.

setopt CSH_JUNKIE_LOOPS
# CSH_JUNKIE_LOOPS <C>
# Allow loop bodies to take the form `list; end' instead of `do list; done'.

#unsetopt CSH_JUNKIE_QUOTES
# CSH_JUNKIE_QUOTES <C>
# Changes  the  rules for single- and double-quoted text to match that of csh.  These require that
# embedded newlines be preceded by a backslash; unescaped newlines will cause  an  error  message.
# In  double-quoted  strings,  it  is made impossible to escape `$', ``' or `"' (and `\' itself no
# longer needs escaping).  Command substitutions are only expanded once, and cannot be nested.

#unsetopt CSH_NULLCMD
# CSH_NULLCMD <C>
# Do not use the values of NULLCMD and READNULLCMD when  running  redirections  with  no  command.
# This make such redirections fail (see the section `Redirection').

#unsetopt KSH_ARRAYS
# KSH_ARRAYS <K> <S>
# Emulate  ksh  array  handling as closely as possible.  If this option is set, array elements are
# numbered from zero, an array parameter without subscript refers to the first element instead  of
# the  whole  array, and braces are required to delimit a subscript (`${path[2]}' rather than just
# `$path[2]').

#unsetopt KSH_AUTOLOAD
# KSH_AUTOLOAD <K> <S>
# Emulate ksh function autoloading.  This means that when a function  is  autoloaded,  the  corre‐
# sponding  file  is merely executed, and must define the function itself.  (By default, the func‐
# tion is defined to the contents of the file.  However, the most common ksh-style case -  of  the
# file containing only a simple definition of the function - is always handled in the ksh-compati‐
# ble manner.)

#unsetopt KSH_OPTION_PRINT
# KSH_OPTION_PRINT <K>
# Alters the way options settings are printed: instead of separate lists of set and unset options,
# all options are shown, marked `on' if they are in the non-default state, `off' otherwise.

#unsetopt KSH_TYPESET
# KSH_TYPESET <K>
# Alters  the  way  arguments to the typeset family of commands, including declare, export, float,
# integer, local and readonly, are processed.  Without this option, zsh will perform  normal  word
# splitting  after  command  and  parameter expansion in arguments of an assignment; with it, word
# splitting does not take place in those cases.

#unsetopt KSH_ZERO_SUBSCRIPT
# KSH_ZERO_SUBSCRIPT
# Treat use of a subscript of value zero in array or string expressions  as  a  reference  to  the
# first element, i.e. the element that usually has the subscript 1.  Ignored if KSH_ARRAYS is also
# set.

# If neither this option nor KSH_ARRAYS is set, accesses to an element of an array or string  with
# subscript zero return an empty element or string, while attempts to set element zero of an array
# or string are treated as an error.  However, attempts to set an otherwise valid subscript  range
# that includes zero will succeed.  For example, if KSH_ZERO_SUBSCRIPT is not set,

# array[0]=(element)

# is an error, while

# array[0,1]=(element)

# is not and will replace the first element of the array.

# This  option is for compatibility with older versions of the shell and is not recommended in new
# code.

#unsetopt POSIX_ALIASES
# POSIX_ALIASES <K> <S>
# When this option is set, reserved words are not candidates for alias  expansion:   it  is  still
# possible  to  declare  any  of them as an alias, but the alias will never be expanded.  Reserved
# words are described in the section RESERVED WORDS in zshmisc(1).

# Alias expansion takes place while text is being read; hence when this option is set it does  not
# take effect until the end of any function or other piece of shell code parsed as one unit.  Note
# this may cause differences from other shells even when the option is in  effect.   For  example,
# when running a command with `zsh -c', or even `zsh -o posixaliases -c', the entire command argu‐
# ment is parsed as one unit, so aliases defined within the argument are  not  available  even  in
# later lines.  If in doubt, avoid use of aliases in non-interactive code.

#unsetopt POSIX_BUILTINS
# POSIX_BUILTINS <K> <S>
# When  this  option  is  set  the  command builtin can be used to execute shell builtin commands.
# Parameter assignments specified before shell functions and special builtins are kept  after  the
# command  completes  unless  the  special  builtin is prefixed with the command builtin.  Special
# builtins are ., :, break, continue, declare,  eval,  exit,  export,  integer,  local,  readonly,
# return, set, shift, source, times, trap and unset.

# In  addition,  various  error  conditions  associated  with  the  above builtins or exec cause a
# non-interactive shell to exit and an interactive shell to return to its top-level processing.

#unsetopt POSIX_IDENTIFIERS
# POSIX_IDENTIFIERS <K> <S>
# When this option is set, only the ASCII characters a to z, A to Z, 0 to 9 and _ may be  used  in
# identifiers (names of shell parameters and modules).

# When  the option is unset and multibyte character support is enabled (i.e. it is compiled in and
# the option MULTIBYTE is set), then additionally any alphanumeric characters in the local charac‐
# ter  set  may be used in identifiers.  Note that scripts and functions written with this feature
# are not portable, and also that both options must be  set  before  the  script  or  function  is
# parsed; setting them during execution is not sufficient as the syntax variable=value has already
# been parsed as a command rather than an assignment.

# If multibyte character support is not compiled into the shell this option is ignored; all octets
# with  the  top  bit set may be used in identifiers.  This is non-standard but is the traditional
# zsh behaviour.

#unsetopt POSIX_STRINGS
# POSIX_STRINGS <K> <S>
# This option affects processing of quoted strings.  Currently it only affects  the  behaviour  of
# null characters, i.e. character 0 in the portable character set corresponding to US ASCII.

# When  this  option  is  not  set, null characters embedded within strings of the form $'...' are
# treated as ordinary characters. The entire string is maintained within the shell and  output  to
# files  where  necessary,  although  owing to restrictions of the library interface the string is
# truncated at the null character in file names, environment variables, or in arguments to  exter‐
# nal programs.

# When  this  option  is set, the $'...' expression is truncated at the null character.  Note that
# remaining parts of the same string beyond the termination of the quotes are not trunctated.

# For example, the command line argument a$'b\0c'd is treated with the option off as  the  charac‐
# ters a, b, null, c, d, and with the option on as the characters a, b, d.

#unsetopt POSIX_TRAPS
# POSIX_TRAPS <K> <S>
# When  the  is  option  is  set, the usual zsh behaviour of executing traps for EXIT on exit from
# shell functions is suppressed.  In that case, manipulating EXIT traps always alters  the  global
# trap for exiting the shell; the LOCAL_TRAPS option is ignored for the EXIT trap.

#unsetopt SH_FILE_EXPANSION
# SH_FILE_EXPANSION <K> <S>
# Perform filename expansion (e.g., ~ expansion) before parameter expansion, command substitution,
# arithmetic expansion and brace expansion.  If this option is unset, it is performed after  brace
# expansion, so things like `~$USERNAME' and `~{pfalstad,rc}' will work.

#unsetopt SH_NULLCMD
# SH_NULLCMD <K> <S>
# Do  not  use the values of NULLCMD and READNULLCMD when doing redirections, use `:' instead (see
# the section `Redirection').

#unsetopt SH_OPTION_LETTERS
# SH_OPTION_LETTERS <K> <S>
# If this option is set the shell tries to interpret single letter options (which  are  used  with
# set and setopt) like ksh does.  This also affects the value of the - special parameter.

#unsetopt SH_WORD_SPLIT
# SH_WORD_SPLIT (-y) <K> <S>
# Causes  field splitting to be performed on unquoted parameter expansions.  Note that this option
# has nothing to do with word splitting.  (See the section `Parameter Expansion'.)

#unsetopt TRAPS_ASYNC
# TRAPS_ASYNC
# While waiting for a program to exit, handle signals and run traps  immediately.   Otherwise  the
# trap  is  run  after  a  child process has exited.  Note this does not affect the point at which
# traps are run for any case other than when the shell is waiting for a child process.

################################################################################
#                                     Zle                                      #
################################################################################

unsetopt BEEP
# BEEP (+B) <D>
# Beep on error in ZLE.

#unsetopt COMBINING_CHARS
# COMBINING_CHARS
# Assume that the terminal displays combining  characters  correctly.   Specifically,  if  a  base
# alphanumeric character is followed by one or more zero-width punctuation characters, assume that
# the zero-width characters will be displayed as modifications to the base  character  within  the
# same  width.   Not  all terminals handle this.  If this option is not set, zero-width characters
# are displayed separately with special mark-up.

# If this option is set, the pattern test [[:WORD:]] matches a zero-width punctuation character on
# the  assumption  that  it  will  be used as part of a word in combination with a word character.
# Otherwise the base shell does not handle combining characters specially.

#setopt EMACS
# EMACS  If ZLE is loaded, turning on this option has the equivalent effect of `bindkey  -e'.   In  addi‐
# tion,  the VI option is unset.  Turning it off has no effect.  The option setting is not guaran‐
# teed to reflect the current keymap.  This option is provided for compatibility; bindkey  is  the
# recommended interface.

#unsetopt OVERSTRIKE
# OVERSTRIKE
# Start up the line editor in overstrike mode.

#unsetopt SINGLE_LINE_ZLE
# SINGLE_LINE_ZLE (-M) <K>
# Use single-line command line editing instead of multi-line.

# Note  that although this is on by default in ksh emulation it only provides superficial compati‐
# bility with the ksh line editor and reduces the effectiveness of the zsh line editor.  As it has
# no  effect  on shell syntax, many users may wish to disable this option when using ksh emulation
# interactively.

setopt VI
# VI     If ZLE is loaded, turning on this option has the equivalent effect of `bindkey  -v'.   In  addi‐
# tion, the EMACS option is unset.  Turning it off has no effect.  The option setting is not guar‐
# anteed to reflect the current keymap.  This option is provided for compatibility; bindkey is the
# recommended interface.

setopt ZLE
# ZLE (-Z)
# Use the zsh line editor.  Set by default in interactive shells connected to a terminal.

